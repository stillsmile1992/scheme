 (define (make-table) 
     (define local-table (cons '*table* '())) 
     (define (get-key table) (caaar table)) 
     (define (get-value item)  
         (if (pair? (car item)) 
             (if (null? (cdar item)) 
                 #f 
                 (cdar item)) 
             #f)) 
     (define (change-value item value) (set-cdr! (car item) value)) 
     (define (add-subtable table key value) (set-cdr! table  
                                                      (cons (cons (cons key value) 
                                                                  '()) 
                                                            (cdr table)))) 
     (define (assoc key table) 
         (cond ((null? table) #f)  
               ((= key (get-key table)) (car table)) 
               (else (assoc key (cdr table))))) 
     (define (lookup keys) 
         (define (iter keys table) 
             (if (null? keys) 
                 (begin (display table) (get-value table)) 
                 (let ((result (assoc (car keys) (cdr table)))) 
                      (if result 
                         (iter (cdr keys) result) 
                         #f)))) 
         (iter keys local-table)) 
     (define (insert! value keys) 
         (define (iter value keys table) 
             (let ((result (assoc (car keys) (cdr table)))) 
                  (if (null? (cdr keys)) 
                     (if result 
                         (change-value result value) 
                         (add-subtable table (car keys) value)) 
                     (if result 
                         (iter value (cdr keys) result) 
                         (begin (add-subtable table (car keys) '()) 
                                (iter value (cdr keys) (cadr table))))))) 
         (iter value keys local-table)) 
     (define (dispatch m) 
         (cond ((eq? m 'insert!) insert!) 
               ((eq? m 'lookup) lookup) 
               ((eq? m 'print) (display local-table)))) 
     dispatch) 
 (define (insert! x value . keys) ((x 'insert!) value keys)) 
 (define (lookup x . keys) ((x 'lookup) keys)) 
 (define (print t) (t 'print)) 
 (define (delete! t . keys) ((x 'insert!) '() keys)) 

 
 (define t (make-table)) 
 (insert! t 'a 1 1)  
 (lookup t 1 1)  
 (insert! t 'b 2)  
 (insert! t 'c 3)  
 (insert! t 'c 2 3 4)  
 (insert! t 'd 2 3 5)  
 (insert! t 'e 2 3 6)  
 (lookup t 3 4)  
 (lookup t 2 3)  
 (lookup t 2 3 4)  
 (lookup t 1)  
 (insert! t 'x 1 1)  
 (insert! t 'y 2 3 4)  
 (lookup t 1 1)  
 (lookup t 2 3 4)  
 (lookup t 2 3 4)  