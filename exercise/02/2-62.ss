; (define (element-of-set? x set)
;   (cond ((null? set) false)
;         ((equal? x (car set)) true)
;         (else (element-of-set? x (cdr set)))))

; (define (union-set set1 set2)
;     (cond ((and (null? set1) (not (null? set2))
;                 set2))
;             ((and (not (null? set1)) (null? 
;                 set2)))
;             ((element-of-set? (car set1) set2)
;                 (union-set (cdr set1) set2))
;             (else (cons (car set1)
;                         (union-set (cdr set1) set2)))))

(define (union-set set1 set2)
    (cond   ((and (null? set1) (not (null? set2))
                set2))
            ((and (not (null? set1)) (null? set2)
                set1))
            (else (let ((s1 (car set1)) (s2 (car set2)))
                    (cond ((= s1 s2)
                            (cons s1 (union-set (cdr set1) (cdr set2))))
                            ((< s1 s2)
                                (cons s1 (union-set (cdr set1) set2)))
                            ((> s1 s2)
                                (cons s2 (union-set set1 (cdr set2)))))))))

(union-set (list 1 2 3) (list 2 3 4 5))